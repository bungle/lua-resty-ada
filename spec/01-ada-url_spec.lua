local ada = require("resty.ada")
local inspect = require("inspect")


local describe = describe
local it = it
local type = type
local print = print
local pairs = pairs
local ipairs = ipairs
local tostring = tostring


describe("Ada", function()
  describe("URL", function()
    describe(".parse", function()
      it("rejects invalid url", function()
        local u, err = ada.parse("<invalid>")
        assert.falsy(u)
        assert.same("invalid url", err)
      end)
      it("accepts valid url", function()
        local u, err = ada.parse("http://www.google.com/")
        assert.truthy(u)
        assert.falsy(err)
      end)
    end)
    it(".parse_with_base", function()
      local u, err = ada.parse_with_base("/path?search#hash", "http://www.google.com")
      assert.truthy(u)
      assert.falsy(err)
    end)
    it(".idna_to_ascii", function()
      local u, err = ada.idna_to_ascii("www.7‑Eleven.com")
      assert.same("www.xn--7eleven-506c.com", u)
      assert.falsy(err)
    end)
    it(".idna_to_unicode", function()
      local u, err = ada.idna_to_unicode("www.xn--7eleven-506c.com")
      assert.same("www.7‐eleven.com", u)
      assert.falsy(err)
    end)
    describe(".can_parse", function()
      it("rejects invalid url", function()
        local u = ada.can_parse(".com:443/Home/Privacy/Montréal")
        assert.falsy(u)
      end)
      it("accepts valid url", function()
        local u = ada.can_parse("https://www.7‑Eleven.com:443/Home/Privacy/Montréal")
        assert.truthy(u)
      end)
    end)
    describe(".can_parse_with_base", function()
      local u, err = ada.can_parse_with_base("/path?search#hash", "http://www.google.com")
      assert.truthy(u)
      assert.falsy(err)
    end)
    describe(".is_valid", function()
      it("rejects invalid url", function()
        local r = ada.is_valid("<invalid>")
        assert.falsy(r)
      end)
      it("accepts valid url", function()
        local r = ada.is_valid("http://www.google.com/")
        assert.truthy(r)
      end)
    end)
    it(".has_credentials", function()
      local u = ada.parse("https://www.7‑Eleven.com:443/Home/Privacy/Montréal")
      assert.truthy(u:is_valid())
      assert.falsy(u:has_credentials())
      local u = ada.parse("https://foo:bar@www.7‑Eleven.com:443/Home/Privacy/Montréal")
      assert.truthy(u:is_valid())
      assert.truthy(u:has_credentials())
    end)
    it(".has_non_empty_username", function()
      local u = ada.parse("https://www.7‑Eleven.com:443/Home/Privacy/Montréal")
      assert.truthy(u:is_valid())
      assert.falsy(u:has_non_empty_username())
      u = ada.parse("https://foo@www.7‑Eleven.com:443/Home/Privacy/Montréal")
      assert.truthy(u:is_valid())
      assert.truthy(u:has_non_empty_username())
    end)
    it(".has_password", function()
      local u = ada.parse("https://www.7‑Eleven.com:443/Home/Privacy/Montréal")
      assert.truthy(u:is_valid())
      assert.falsy(u:has_password())
      u = ada.parse("https://foo@www.7‑Eleven.com:443/Home/Privacy/Montréal")
      assert.truthy(u:is_valid())
      assert.falsy(u:has_password())
      u = ada.parse("https://foo:@www.7‑Eleven.com:443/Home/Privacy/Montréal")
      assert.truthy(u:is_valid())
      assert.falsy(u:has_password())
      u = ada.parse("https://foo:bar@www.7‑Eleven.com:443/Home/Privacy/Montréal")
      assert.truthy(u:is_valid())
      assert.truthy(u:has_password())
    end)
    it(".has_non_empty_password", function()
      local u = ada.parse("https://www.7‑Eleven.com:443/Home/Privacy/Montréal")
      assert.truthy(u:is_valid())
      assert.falsy(u:has_non_empty_password())
      u = ada.parse("https://foo@www.7‑Eleven.com:443/Home/Privacy/Montréal")
      assert.truthy(u:is_valid())
      assert.falsy(u:has_non_empty_password())
      u = ada.parse("https://foo:@www.7‑Eleven.com:443/Home/Privacy/Montréal")
      assert.truthy(u:is_valid())
      assert.falsy(u:has_non_empty_password())
      u = ada.parse("https://foo:bar@www.7‑Eleven.com:443/Home/Privacy/Montréal")
      assert.truthy(u:is_valid())
      assert.truthy(u:has_non_empty_password())
    end)
    it(".has_hostname", function()
      assert.truthy(ada.has_hostname("https://www.7‑Eleven.com"))
      assert.falsy(ada.has_hostname("https://:8888"))
    end)
    it(".has_empty_hostname", function()
      assert.falsy(ada.has_empty_hostname("https://www.7‑Eleven.com"))
    end)
    it(".has_empty_hostname", function()
      assert.falsy(ada.has_empty_hostname("https://www.7‑Eleven.com"))
      assert.falsy(ada.has_empty_hostname("https://www.7‑Eleven.com"))
    end)
    it(".has_port", function()
      assert.falsy(ada.has_port("https://www.foo.com:443")) -- this is expected to return false on standard port
      assert.falsy(ada.has_port("https://www.foo.com"))
      assert.truthy(ada.has_port("https://www.foo.com:8888"))
    end)
    it(".has_search", function()
      assert.truthy(ada.has_search("https://www.foo.com?foo=bar"))
      assert.falsy(ada.has_search("https://www.foo.com"))
    end)
    it(".has_hash", function()
      assert.truthy(ada.has_hash("https://www.foo.com?foo=bar#abc"))
      assert.truthy(ada.has_hash("https://www.foo.com#abc"))
      assert.falsy(ada.has_hash("https://www.foo.com"))
    end)
    it(".get_components", function()
      local u = ada.parse("https://www.7‑Eleven.com:443/Home/Privacy/Montréal")
      local c = u:get_components()
      assert.same(32, c.host_end)
      assert.same(9, c.host_start)
      assert.same(33, c.pathname_start)
      assert.same(7, c.protocol_end)
      assert.same(9, c.username_end)
    end)
    it(".get_href", function()
      local u, err = ada.get_href("https://user:pass@host:1234/path?search#hash")
      assert.same("https://user:pass@host:1234/path?search#hash", u)
      assert.falsy(err)
    end)
    it(".get_protocol", function()
      assert.same("https:", ada.get_protocol("https://www.foo.com"))
      assert.is_nil(ada.get_protocol("www.foo.com?foo=bar"))
    end)
    it(".get_protocol", function()
      assert.same(2, ada.get_scheme_type("https://www.foo.com"))
      assert.same(1, ada.get_scheme_type("grpc://www.foo.com"))
      assert.same(0, ada.get_scheme_type("http://www.foo.com"))
      assert.is_nil(ada.get_scheme_type("www.foo.com"))
    end)
    it(".get_origin", function()
      assert.same("https://www.foo.com", ada.get_origin("https://www.foo.com/foo/bar"))
      assert.is_nil(ada.get_origin("www.foo.com/foo/bar"))
    end)
    it(".get_username", function()
      assert.same("foo", ada.get_username("https://foo:bar@www.foo.com?foo=bar"))
      assert.same("", ada.get_username("https://:bar@www.foo.com?foo=bar"))
      assert.same("", ada.get_username("https://:@www.foo.com?foo=bar"))
      assert.same("", ada.get_username("https://www.foo.com?foo=bar"))
    end)
    it(".get_password", function()
      assert.same("bar", ada.get_password("https://foo:bar@www.foo.com?foo=bar"))
      assert.same("bar", ada.get_password("https://:bar@www.foo.com?foo=bar"))
      assert.same("", ada.get_password("https://:@www.foo.com?foo=bar"))
      assert.same("", ada.get_password("https://www.foo.com?foo=bar"))
    end)
    it(".get_host", function()
      assert.same("www.foo.com", ada.get_host("https://foo:bar@www.foo.com?foo=bar"))
      assert.same("127.0.0.1", ada.get_host("https://127.0.0.1/foo/bar"))
    end)
    it(".get_hostname", function()
      assert.same("www.foo.com", ada.get_hostname("https://foo:bar@www.foo.com?foo=bar"))
      assert.same("127.0.0.1", ada.get_hostname("https://127.0.0.1/foo/bar"))
    end)
    it(".get_host_type", function()
      assert.same(0, ada.get_host_type("https://foo:bar@www.foo.com?foo=bar"))
      assert.same(1, ada.get_host_type("https://127.0.0.1/foo/bar"))
    end)
    it(".get_port", function()
      assert.same("", ada.get_port("https://www.foo.com:443"))
      assert.same("", ada.get_port("https://www.foo.com"))
      assert.same(8888, ada.get_port("https://www.foo.com:8888"))
    end)
    it(".get_pathname", function()
      assert.same("/", ada.get_pathname("https://foo:bar@www.foo.com?foo=bar"))
      assert.same("/foo/bar", ada.get_pathname("https://127.0.0.1/foo/bar"))
    end)
    it(".get_search", function()
      assert.same("?foo=bar", ada.get_search("https://www.foo.com?foo=bar"))
      assert.same("?foo=bar&a=b&b=c", ada.get_search("https://www.foo.com?foo=bar&a=b&b=c"))
      assert.same("", ada.get_search("https://www.foo.com/"))
      assert.same("", ada.get_search("https://www.foo.com?"))
    end)
    it(".get_hash", function()
      assert.same("#foo-bar", ada.get_hash("https://www.foo.com?foo=bar#foo-bar"))
      assert.same("", ada.get_hash("https://www.foo.com#"))
      assert.same("", ada.get_hash("https://www.foo.com"))
    end)
    it(".set_protocol", function()
      local u = ada.parse("https://www.7‑Eleven.com:443/Home/Privacy/Montréal")
      assert(u:set_protocol("http"))
      assert.same("http:", u:get_protocol())
      assert(u:set_protocol("https"))
      assert.same("https:", u:get_protocol())
    end)
    it(".set_password", function()
      local u = ada.parse("https://www.7‑Eleven.com:443/Home/Privacy/Montréal")
      assert(u:set_password("pass"))
      assert.same("pass", u:get_password())
    end)
    it(".set_host", function()
      local u = ada.parse("https://www.7‑Eleven.com:443/Home/Privacy/Montréal")
      assert(u:set_host("example.com"))
      assert.same("example.com", u:get_host())
    end)
    it(".set_hostname", function()
      local u = ada.parse("https://www.7‑Eleven.com:443/Home/Privacy/Montréal")
      assert(u:set_hostname("example.com"))
      assert.same("example.com", u:get_host())
    end)
    it(".set_pathname", function()
      local u = ada.parse("https://www.7‑Eleven.com:443/Home/Privacy")
      assert.same("/Home/Privacy", u:get_pathname())
      assert(u:set_pathname("/foo/bar"))
      assert.same("/foo/bar", u:get_pathname())
    end)
    it(".set_pathname", function()
      local u = ada.parse("https://www.7‑Eleven.com:443/Home/Privacy?foo=bar")
      assert.same("?foo=bar", u:get_search())
      assert(u:set_search("bar=baz"))
      assert.same("?bar=baz", u:get_search())
    end)
    it(".set_hash", function()
      local u = ada.parse("https://www.7‑Eleven.com:443/Home/Privacy?foo=bar#foo")
      assert.same("#foo", u:get_hash())
      assert(u:set_hash("#bar"))
      assert.same("#bar", u:get_hash())
    end)
    it(".clear_port", function()
      local u = ada.parse("https://www.google.com:8888/")
      assert.same("https://www.google.com/", tostring(u:clear_port()))
    end)
    it(".clear_search", function()
      local u = ada.parse("https://www.google.com:8888?foo=bar")
      assert.same("https://www.google.com:8888/", tostring(u:clear_search()))
    end)
    it(".clear_hash", function()
      local u = ada.parse("https://www.google.com:8888?foo=bar#bar")
      assert.same("https://www.google.com:8888/?foo=bar", tostring(u:clear_hash()))
    end)
    it(".search_has", function()
      local u = ada.parse("https://www.google.com?doge=z&jack=2")
      assert.truthy(u:search_has("jack"))
    end)
    it(".search_has_value", function()
      local u = ada.parse("https://www.google.com?doge=z&jack=2")
      assert.falsy(u:search_has_value("jack", "4"))
      assert.truthy(u:search_has_value("jack", "2"))
    end)
    it(".search_get", function()
      local u = ada.parse("https://www.google.com?doge=z&jack=2")
      assert.same("2", u:search_get("jack"))
      assert.is_nil(u:search_get("foo"))
    end)
    it(".search_get_all", function()
      local u = ada.parse("https://www.google.com?doge=z&jack=2&doge=s")
      assert.same({"z", "s"}, u:search_get_all("doge"))
    end)
    it(".search_set", function()
      local u = ada.parse("https://www.google.com?doge=z&jack=2")
      assert.same("https://www.google.com/?doge=z&jack=4", tostring(u:search_set("jack", "4")))
    end)
    it(".search_append", function()
      local u = ada.parse("https://www.google.com?doge=z&jack=2")
      assert.same("https://www.google.com/?doge=z&jack=2&doge=z", tostring(u:search_append("doge", "z")))
    end)
    it(".search_remove", function()
      local u = ada.parse("https://www.google.com?doge=z&jack=2&doge=s&bug&aa=3")
      assert.same("https://www.google.com/?jack=2&bug=&aa=3", tostring(u:search_remove("doge")))
    end)
    it(".search_remove_value", function()
      local u = ada.parse("https://www.google.com?doge=z&jack=2&doge=s&bug&aa=3")
      assert.same("https://www.google.com/?doge=z&jack=2&doge=s&bug=&aa=3", tostring(u:search_remove_value("doge", "t")))
      u = ada.parse("https://www.google.com?doge=z&jack=2&doge=s&bug&aa=3")
      assert.same("https://www.google.com/?jack=2&doge=s&bug=&aa=3", tostring(u:search_remove_value("doge", "z")))
    end)
    it(".search_sort", function()
      local u = ada.parse("https://www.google.com?doge=z&jack=2&doge=s")
      assert.same("https://www.google.com/?doge=z&doge=s&jack=2", tostring(u:search_sort()))
    end)
    it(".search_size", function()
      local u = ada.parse("https://www.google.com?doge=z&jack=2&doge=s")
      assert.same(3, u:search_size())
    end)
    it(".search_pairs", function()
      local args = {
        doge = true,
        jack = true,
        bug = true,
        aa = true,
        bb = true,
      }
      for k, v in ada.search.pairs("?doge=z&jack=2&doge=s&bug=&aa=3&bb=4&bb=10") do
        assert.truthy(args[k])
      end
    end)
    it(".search_ipairs", function()
      local args = {
        doge = true,
        jack = true,
        bug = true,
        aa = true,
        bb = true,
      }
      for _, v in ada.search.ipairs("?doge=z&jack=2&doge=s&bug=&aa=3&bb=4&bb=10") do
        assert.truthy(args[v.key])
      end
    end)
    it(".each", function()
      local args = {
        doge = true,
        jack = true,
        bug = true,
        aa = true,
        bb = true,
      }
      for t in ada.search.each("?doge=z&jack=2&doge=s&bug=&aa=3&bb=4&bb=10") do
        assert.truthy(args[t.key])
      end
    end)
    it(".each_key", function()
      local args = {
        doge = true,
        jack = true,
        bug = true,
        aa = true,
        bb = true,
      }
      for k in ada.search.each_key("?doge=z&jack=2&doge=s&bug=&aa=3&bb=4&bb=10") do  
        assert.truthy(args[k])
      end
    end)
    it(".each_value", function()
      local args = {
        z = true,
        ["2"] = true,
        s = true,
        [""] = true,
        ["3"] = true,
        ["4"] = true,
        ["10"] = true,
      }
      for v in ada.search.each_value("?doge=z&jack=2&doge=s&bug=&aa=3&bb=4&bb=10") do    
        assert.truthy(args[v])
      end
    end)
  end)
end)
